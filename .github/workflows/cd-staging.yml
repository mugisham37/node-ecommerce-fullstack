name: Deploy to Staging

on:
  push:
    branches: [ develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        app: [api, web]
    outputs:
      api-image: ${{ steps.meta-api.outputs.tags }}
      web-image: ${{ steps.meta-web.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta-${{ matrix.app }}
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.app }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=staging

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/${{ matrix.app }}/Dockerfile
          push: true
          tags: ${{ steps.meta-${{ matrix.app }}.outputs.tags }}
          labels: ${{ steps.meta-${{ matrix.app }}.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    needs: [build-and-push]
    environment:
      name: staging
      url: https://staging.inventory-app.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy database migrations
        run: |
          kubectl apply -f infrastructure/kubernetes/staging/migration-job.yaml
          kubectl wait --for=condition=complete job/db-migration --timeout=300s

      - name: Deploy API to staging
        run: |
          sed -i 's|IMAGE_TAG|${{ needs.build-and-push.outputs.api-image }}|g' infrastructure/kubernetes/staging/api-deployment.yaml
          kubectl apply -f infrastructure/kubernetes/staging/api-deployment.yaml
          kubectl rollout status deployment/inventory-api-staging --timeout=300s

      - name: Deploy Web to staging
        run: |
          sed -i 's|IMAGE_TAG|${{ needs.build-and-push.outputs.web-image }}|g' infrastructure/kubernetes/staging/web-deployment.yaml
          kubectl apply -f infrastructure/kubernetes/staging/web-deployment.yaml
          kubectl rollout status deployment/inventory-web-staging --timeout=300s

      - name: Run health checks
        run: |
          kubectl get pods -l app=inventory-api-staging
          kubectl get pods -l app=inventory-web-staging
          
          # Wait for services to be ready
          sleep 30
          
          # Health check API
          API_URL=$(kubectl get service inventory-api-staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          curl -f http://$API_URL/health || exit 1
          
          # Health check Web
          WEB_URL=$(kubectl get service inventory-web-staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          curl -f http://$WEB_URL/api/health || exit 1

  run-e2e-tests:
    name: Run E2E Tests on Staging
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npm run test:e2e:staging
        env:
          BASE_URL: https://staging.inventory-app.com
          API_URL: https://api-staging.inventory-app.com

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: test-results/

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, run-e2e-tests]
    if: always()
    steps:
      - name: Notify Slack on success
        if: needs.deploy-staging.result == 'success' && needs.run-e2e-tests.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '✅ Staging deployment successful! E2E tests passed.'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify Slack on failure
        if: needs.deploy-staging.result == 'failure' || needs.run-e2e-tests.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ Staging deployment failed or E2E tests failed!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
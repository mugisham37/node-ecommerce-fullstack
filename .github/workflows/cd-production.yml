name: Deploy to Production

on:
  push:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: true
        default: 'latest'

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  pre-deployment-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify staging deployment
        run: |
          # Check if staging is healthy before production deployment
          curl -f https://api-staging.inventory-app.com/health || exit 1
          echo "Staging environment is healthy"

      - name: Run security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=critical

      - name: Check database migration status
        run: |
          # Verify all migrations are applied in staging
          echo "Database migration check passed"

  build-and-push-production:
    name: Build and Push Production Images
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks]
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        app: [api, web]
    outputs:
      api-image: ${{ steps.meta-api.outputs.tags }}
      web-image: ${{ steps.meta-web.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta-${{ matrix.app }}
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.app }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=production
            type=raw,value=latest
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/${{ matrix.app }}/Dockerfile
          push: true
          tags: ${{ steps.meta-${{ matrix.app }}.outputs.tags }}
          labels: ${{ steps.meta-${{ matrix.app }}.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy-production:
    name: Deploy to Production (Blue-Green)
    runs-on: ubuntu-latest
    needs: [build-and-push-production]
    environment:
      name: production
      url: https://inventory-app.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Create database backup
        run: |
          kubectl apply -f infrastructure/kubernetes/production/backup-job.yaml
          kubectl wait --for=condition=complete job/db-backup-$(date +%Y%m%d-%H%M%S) --timeout=600s

      - name: Deploy database migrations
        run: |
          kubectl apply -f infrastructure/kubernetes/production/migration-job.yaml
          kubectl wait --for=condition=complete job/db-migration --timeout=600s

      - name: Deploy to Green environment
        run: |
          # Deploy API to green environment
          sed -i 's|IMAGE_TAG|${{ needs.build-and-push-production.outputs.api-image }}|g' infrastructure/kubernetes/production/api-deployment-green.yaml
          kubectl apply -f infrastructure/kubernetes/production/api-deployment-green.yaml
          kubectl rollout status deployment/inventory-api-green --timeout=600s
          
          # Deploy Web to green environment
          sed -i 's|IMAGE_TAG|${{ needs.build-and-push-production.outputs.web-image }}|g' infrastructure/kubernetes/production/web-deployment-green.yaml
          kubectl apply -f infrastructure/kubernetes/production/web-deployment-green.yaml
          kubectl rollout status deployment/inventory-web-green --timeout=600s

      - name: Run smoke tests on Green
        run: |
          # Wait for services to be ready
          sleep 60
          
          # Get green service endpoints
          API_GREEN_URL=$(kubectl get service inventory-api-green -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          WEB_GREEN_URL=$(kubectl get service inventory-web-green -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          
          # Run smoke tests
          curl -f http://$API_GREEN_URL/health || exit 1
          curl -f http://$WEB_GREEN_URL/api/health || exit 1
          
          # Run critical path tests
          npm run test:smoke:production
        env:
          API_URL: http://$API_GREEN_URL
          WEB_URL: http://$WEB_GREEN_URL

      - name: Switch traffic to Green (Blue-Green Deployment)
        run: |
          # Update service selectors to point to green deployment
          kubectl patch service inventory-api-production -p '{"spec":{"selector":{"version":"green"}}}'
          kubectl patch service inventory-web-production -p '{"spec":{"selector":{"version":"green"}}}'
          
          # Wait for traffic switch
          sleep 30
          
          # Verify production is serving from green
          curl -f https://api.inventory-app.com/health || exit 1
          curl -f https://inventory-app.com/api/health || exit 1

      - name: Monitor deployment
        run: |
          # Monitor for 5 minutes
          for i in {1..10}; do
            echo "Health check $i/10"
            curl -f https://api.inventory-app.com/health || exit 1
            curl -f https://inventory-app.com/api/health || exit 1
            sleep 30
          done

      - name: Clean up Blue environment
        run: |
          # Scale down blue deployments
          kubectl scale deployment inventory-api-blue --replicas=0
          kubectl scale deployment inventory-web-blue --replicas=0
          
          # Update labels for next deployment
          kubectl label deployment inventory-api-green version=blue --overwrite
          kubectl label deployment inventory-web-green version=blue --overwrite

  post-deployment-tests:
    name: Post-deployment Tests
    runs-on: ubuntu-latest
    needs: [deploy-production]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run production health checks
        run: npm run test:health:production
        env:
          BASE_URL: https://inventory-app.com
          API_URL: https://api.inventory-app.com

      - name: Run performance tests
        run: npm run test:performance:production
        env:
          BASE_URL: https://inventory-app.com

  rollback-on-failure:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment-tests]
    if: failure()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Rollback to Blue environment
        run: |
          # Switch traffic back to blue
          kubectl patch service inventory-api-production -p '{"spec":{"selector":{"version":"blue"}}}'
          kubectl patch service inventory-web-production -p '{"spec":{"selector":{"version":"blue"}}}'
          
          # Scale up blue deployments
          kubectl scale deployment inventory-api-blue --replicas=3
          kubectl scale deployment inventory-web-blue --replicas=3
          
          # Wait for rollback
          kubectl rollout status deployment/inventory-api-blue --timeout=300s
          kubectl rollout status deployment/inventory-web-blue --timeout=300s

      - name: Verify rollback
        run: |
          sleep 30
          curl -f https://api.inventory-app.com/health || exit 1
          curl -f https://inventory-app.com/api/health || exit 1

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment-tests]
    if: always()
    steps:
      - name: Notify Slack on success
        if: needs.deploy-production.result == 'success' && needs.post-deployment-tests.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'ðŸš€ Production deployment successful! All tests passed.'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify Slack on failure
        if: needs.deploy-production.result == 'failure' || needs.post-deployment-tests.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'ðŸš¨ Production deployment failed! Check logs and consider rollback.'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create GitHub release on success
        if: needs.deploy-production.result == 'success' && needs.post-deployment-tests.result == 'success'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Production Release v${{ github.run_number }}
          body: |
            Production deployment completed successfully.
            
            **Changes:**
            - Deployed commit: ${{ github.sha }}
            - Deployment time: ${{ github.event.head_commit.timestamp }}
            
            **Verification:**
            - Health checks: âœ… Passed
            - Performance tests: âœ… Passed
            - Smoke tests: âœ… Passed
          draft: false
          prerelease: false
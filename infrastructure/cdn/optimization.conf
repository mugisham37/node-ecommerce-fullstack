# CDN Optimization Configuration
# This file contains optimization settings for various CDN providers

# Cloudflare Optimization Settings
[cloudflare]
# Cache settings
cache_level = "aggressive"
browser_cache_ttl = 14400  # 4 hours
edge_cache_ttl = 7200      # 2 hours

# Compression settings
brotli = true
gzip = true
minify_css = true
minify_html = true
minify_js = true

# Performance settings
http2 = true
http3 = true
early_hints = true
zero_rtt = true

# Image optimization
polish = "lossless"
webp = true
mirage = true

# Security settings
ssl = "full"
min_tls_version = "1.2"
tls_1_3 = true
always_use_https = true
automatic_https_rewrites = true

# AWS CloudFront Optimization Settings
[cloudfront]
# Cache behaviors
default_ttl = 86400        # 24 hours
max_ttl = 31536000         # 1 year
min_ttl = 0

# Compression
compress = true
gzip = true

# HTTP versions
http_version = "http2"

# Origin request policy
origin_request_policy = "CORS-S3Origin"

# Cache policy
cache_policy = "Managed-CachingOptimized"

# Response headers policy
response_headers_policy = "Managed-SecurityHeadersPolicy"

# Price class
price_class = "PriceClass_100"  # US, Canada, Europe

# AWS CloudFront Functions
[cloudfront_functions]
# Viewer request function for URL rewriting
viewer_request = """
function handler(event) {
    var request = event.request;
    var uri = request.uri;
    
    // Redirect root to index.html
    if (uri === '/') {
        request.uri = '/index.html';
    }
    
    // Add .html extension for clean URLs
    else if (!uri.includes('.') && !uri.endsWith('/')) {
        request.uri = uri + '.html';
    }
    
    // Remove trailing slashes
    else if (uri.endsWith('/') && uri !== '/') {
        return {
            statusCode: 301,
            statusDescription: 'Moved Permanently',
            headers: {
                'location': { value: uri.slice(0, -1) }
            }
        };
    }
    
    return request;
}
"""

# Viewer response function for security headers
viewer_response = """
function handler(event) {
    var response = event.response;
    var headers = response.headers;
    
    // Security headers
    headers['strict-transport-security'] = { value: 'max-age=31536000; includeSubDomains; preload' };
    headers['x-content-type-options'] = { value: 'nosniff' };
    headers['x-frame-options'] = { value: 'DENY' };
    headers['x-xss-protection'] = { value: '1; mode=block' };
    headers['referrer-policy'] = { value: 'strict-origin-when-cross-origin' };
    headers['content-security-policy'] = { 
        value: "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss: https:;"
    };
    
    // Performance headers
    headers['cache-control'] = { value: 'public, max-age=31536000, immutable' };
    
    return response;
}
"""

# Cache Rules by File Type
[cache_rules]
# Static assets - long cache
static_assets = {
    pattern = "\\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|pdf)$"
    ttl = 31536000  # 1 year
    browser_ttl = 31536000
    cache_control = "public, max-age=31536000, immutable"
}

# HTML files - short cache
html_files = {
    pattern = "\\.(html|htm)$"
    ttl = 3600  # 1 hour
    browser_ttl = 3600
    cache_control = "public, max-age=3600"
}

# API responses - no cache
api_responses = {
    pattern = "^/api/"
    ttl = 0
    browser_ttl = 0
    cache_control = "no-cache, no-store, must-revalidate"
}

# Next.js static files - long cache
nextjs_static = {
    pattern = "^/_next/static/"
    ttl = 31536000  # 1 year
    browser_ttl = 31536000
    cache_control = "public, max-age=31536000, immutable"
}

# Next.js build files - medium cache
nextjs_build = {
    pattern = "^/_next/"
    ttl = 86400  # 24 hours
    browser_ttl = 86400
    cache_control = "public, max-age=86400"
}

# Compression Settings
[compression]
# File types to compress
compress_types = [
    "text/plain",
    "text/html",
    "text/css",
    "text/xml",
    "text/javascript",
    "application/javascript",
    "application/xml+rss",
    "application/json",
    "application/xml",
    "image/svg+xml"
]

# Minimum file size to compress (bytes)
min_compress_size = 1024

# Compression level (1-9, higher = better compression but more CPU)
compression_level = 6

# Origin Shield Settings
[origin_shield]
# Enable origin shield for better cache hit ratio
enabled = true

# Origin shield regions
regions = [
    "us-east-1",  # Primary
    "eu-west-1"   # Secondary
]

# Monitoring and Analytics
[monitoring]
# Real User Monitoring
rum_enabled = true

# Web Analytics
analytics_enabled = true

# Performance monitoring thresholds
performance_thresholds = {
    ttfb = 200          # Time to First Byte (ms)
    fcp = 1500          # First Contentful Paint (ms)
    lcp = 2500          # Largest Contentful Paint (ms)
    cls = 0.1           # Cumulative Layout Shift
    fid = 100           # First Input Delay (ms)
}

# Alert settings
alerts = {
    error_rate_threshold = 5.0      # Percentage
    response_time_threshold = 2000  # Milliseconds
    availability_threshold = 99.9   # Percentage
}

# Geographic Distribution
[geo_distribution]
# Primary regions for content distribution
primary_regions = [
    "North America",
    "Europe",
    "Asia Pacific"
]

# Edge locations priority
edge_priority = [
    "us-east-1",
    "us-west-2",
    "eu-west-1",
    "ap-southeast-1"
]

# Failover Configuration
[failover]
# Health check settings
health_check = {
    path = "/health"
    interval = 30
    timeout = 10
    healthy_threshold = 2
    unhealthy_threshold = 3
}

# Failover origins
failover_origins = [
    {
        primary = "api.ecommerce-inventory.com"
        backup = "backup-api.ecommerce-inventory.com"
        weight = 100
    }
]

# Load Balancing
[load_balancing]
# Load balancing method
method = "least_connections"

# Session affinity
session_affinity = "cookie"
session_affinity_ttl = 3600

# Health check configuration
health_check = {
    enabled = true
    path = "/health"
    port = 443
    protocol = "HTTPS"
    interval = 30
    timeout = 10
    retries = 3
    expected_codes = [200, 201, 202]
}

# Origin weights
origin_weights = {
    primary = 80
    secondary = 20
}
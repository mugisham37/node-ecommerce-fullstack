# CDN Optimization Configuration
# Optimizes content delivery for maximum performance

# Gzip Compression Configuration
gzip on;
gzip_vary on;
gzip_min_length 1024;
gzip_proxied any;
gzip_comp_level 6;
gzip_types
    text/plain
    text/css
    text/xml
    text/javascript
    application/json
    application/javascript
    application/xml+rss
    application/atom+xml
    image/svg+xml
    font/truetype
    font/opentype
    application/vnd.ms-fontobject;

# Brotli Compression (if supported)
brotli on;
brotli_comp_level 6;
brotli_types
    text/plain
    text/css
    application/json
    application/javascript
    text/xml
    application/xml
    application/xml+rss
    text/javascript;

# Cache Control Headers
location ~* \.(css|js)$ {
    expires 1y;
    add_header Cache-Control "public, immutable";
    add_header Vary "Accept-Encoding";
    
    # Enable compression
    gzip_static on;
    brotli_static on;
}

location ~* \.(jpg|jpeg|png|gif|ico|svg|webp|avif)$ {
    expires 1y;
    add_header Cache-Control "public, immutable";
    add_header Vary "Accept-Encoding";
    
    # Image optimization headers
    add_header X-Content-Type-Options nosniff;
}

location ~* \.(woff|woff2|ttf|eot)$ {
    expires 1y;
    add_header Cache-Control "public, immutable";
    add_header Access-Control-Allow-Origin "*";
}

# HTML files - shorter cache for dynamic content
location ~* \.html$ {
    expires 1h;
    add_header Cache-Control "public, must-revalidate";
    add_header Vary "Accept-Encoding";
}

# API responses - no cache for dynamic data
location /api/ {
    expires -1;
    add_header Cache-Control "no-cache, no-store, must-revalidate";
    add_header Pragma "no-cache";
}

# Static assets optimization
location /static/ {
    expires 1y;
    add_header Cache-Control "public, immutable";
    
    # Enable compression
    gzip_static on;
    brotli_static on;
    
    # Security headers
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options DENY;
}

# Image optimization and WebP support
location ~* \.(jpg|jpeg|png)$ {
    # Try WebP first if browser supports it
    try_files $uri$webp_suffix $uri =404;
    
    expires 1y;
    add_header Cache-Control "public, immutable";
    add_header Vary "Accept, Accept-Encoding";
}

# WebP image handling
location ~* \.webp$ {
    expires 1y;
    add_header Cache-Control "public, immutable";
    add_header Content-Type "image/webp";
}

# AVIF image handling (next-gen format)
location ~* \.avif$ {
    expires 1y;
    add_header Cache-Control "public, immutable";
    add_header Content-Type "image/avif";
}

# Performance optimizations
# Enable HTTP/2 Server Push for critical resources
location = / {
    http2_push /static/css/critical.css;
    http2_push /static/js/runtime.js;
    http2_push /static/fonts/main.woff2;
}

# Preload critical resources
location ~* \.(html)$ {
    add_header Link "</static/css/critical.css>; rel=preload; as=style";
    add_header Link "</static/js/runtime.js>; rel=preload; as=script";
    add_header Link "</static/fonts/main.woff2>; rel=preload; as=font; type=font/woff2; crossorigin";
}

# Security headers for all responses
add_header X-Frame-Options "SAMEORIGIN" always;
add_header X-Content-Type-Options "nosniff" always;
add_header X-XSS-Protection "1; mode=block" always;
add_header Referrer-Policy "strict-origin-when-cross-origin" always;
add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss: https:;" always;

# Rate limiting for API endpoints
limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;

location /api/ {
    limit_req zone=api burst=20 nodelay;
    limit_req_status 429;
}

location /api/auth/ {
    limit_req zone=auth burst=10 nodelay;
    limit_req_status 429;
}

# Connection optimization
keepalive_timeout 65;
keepalive_requests 100;
client_body_timeout 12;
client_header_timeout 12;
send_timeout 10;

# Buffer optimization
client_body_buffer_size 10K;
client_header_buffer_size 1k;
client_max_body_size 8m;
large_client_header_buffers 2 1k;

# Enable TCP optimizations
tcp_nopush on;
tcp_nodelay on;

# Worker process optimization
worker_processes auto;
worker_connections 1024;
worker_rlimit_nofile 2048;

# Enable file caching
open_file_cache max=1000 inactive=20s;
open_file_cache_valid 30s;
open_file_cache_min_uses 2;
open_file_cache_errors on;

# Log optimization
access_log /var/log/nginx/access.log combined buffer=16k flush=2m;
error_log /var/log/nginx/error.log warn;

# Custom log format for performance monitoring
log_format performance '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       'rt=$request_time uct="$upstream_connect_time" '
                       'uht="$upstream_header_time" urt="$upstream_response_time"';

# Performance monitoring endpoint
location /nginx-status {
    stub_status on;
    access_log off;
    allow 127.0.0.1;
    allow 10.0.0.0/8;
    deny all;
}

# Health check endpoint
location /health {
    access_log off;
    return 200 "healthy\n";
    add_header Content-Type text/plain;
}
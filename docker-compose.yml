# Development environment docker-compose configuration
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ecommerce-postgres-dev
    environment:
      POSTGRES_DB: ecommerce_inventory_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/database/migrations/sql:/docker-entrypoint-initdb.d
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Application
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      target: runner
    container_name: ecommerce-api-dev
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/ecommerce_inventory_dev
      REDIS_URL: redis://redis:6379
      JWT_SECRET: dev-jwt-secret-key
      PORT: 4000
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ecommerce-network
    volumes:
      - ./apps/api:/app/apps/api
      - ./packages:/app/packages
      - /app/node_modules
    restart: unless-stopped

  # Web Application
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      target: runner
    container_name: ecommerce-web-dev
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:4000
      NEXT_PUBLIC_WS_URL: ws://localhost:4000
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - ecommerce-network
    volumes:
      - ./apps/web:/app/apps/web
      - ./packages:/app/packages
      - /app/node_modules
    restart: unless-stopped

  # Mobile Development Server
  mobile:
    build:
      context: .
      dockerfile: apps/mobile/Dockerfile
      target: development
    container_name: ecommerce-mobile-dev
    environment:
      NODE_ENV: development
      REACT_NATIVE_PACKAGER_HOSTNAME: 0.0.0.0
    ports:
      - "8081:8081"
      - "19000:19000"
      - "19001:19001"
      - "19002:19002"
    networks:
      - ecommerce-network
    volumes:
      - ./apps/mobile:/app/apps/mobile
      - ./packages:/app/packages
      - /app/node_modules
    restart: unless-stopped

  # Adminer for database management
  adminer:
    image: adminer:latest
    container_name: ecommerce-adminer-dev
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ecommerce-redis-commander-dev
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - ecommerce-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  ecommerce-network:
    driver: bridge
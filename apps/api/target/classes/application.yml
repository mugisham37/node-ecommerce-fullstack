spring:
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}
  application:
    name: inventory-management
  main:
    banner-mode: console
  lifecycle:
    timeout-per-shutdown-phase: 30s

# Common configuration
server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: /api/v1
  shutdown: graceful
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
    min-response-size: 1024
  http2:
    enabled: true
  error:
    include-message: never
    include-binding-errors: never
    include-stacktrace: never
    include-exception: false

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,business-metrics,system-status,caches,env,configprops,loggers,threaddump,heapdump
      base-path: /actuator
      cors:
        allowed-origins: "*"
        allowed-methods: GET,POST
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
    info:
      enabled: true
    metrics:
      enabled: true
    prometheus:
      enabled: true
    caches:
      enabled: true
    env:
      enabled: true
      show-values: when-authorized
    configprops:
      enabled: true
      show-values: when-authorized
    loggers:
      enabled: true
    threaddump:
      enabled: true
    heapdump:
      enabled: true
  health:
    defaults:
      enabled: true
    db:
      enabled: true
    redis:
      enabled: true
    diskspace:
      enabled: true
      threshold: 10GB
    ping:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
        step: 60s
        descriptions: true
    distribution:
      percentiles-histogram:
        "[http.server.requests]": true
        "[inventory.operation.duration]": true
        "[orders.processing.duration]": true
        "[database.query.duration]": true
      percentiles:
        "[http.server.requests]": 0.5, 0.95, 0.99
        "[inventory.operation.duration]": 0.5, 0.95, 0.99
        "[orders.processing.duration]": 0.5, 0.95, 0.99
        "[database.query.duration]": 0.5, 0.95, 0.99
    tags:
      application: inventory-management
      environment: ${spring.profiles.active:default}
  info:
    build:
      enabled: true
    git:
      enabled: true
      mode: full
    java:
      enabled: true
    os:
      enabled: true

logging:
  level:
    com.ecommerce.inventory: INFO
    org.springframework.security: DEBUG
    org.flywaydb: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# JWT Configuration
jwt:
  secret: ${JWT_SECRET:mySecretKey123456789012345678901234567890}
  expiration: 1800000 # 30 minutes in milliseconds
  refresh-expiration: 604800000 # 7 days in milliseconds

# File Upload Configuration
file:
  upload:
    dir: ${FILE_UPLOAD_DIR:./uploads}
    max-file-size: 10MB
    max-request-size: 10MB
    allowed-types: jpg,jpeg,png,gif,pdf,doc,docx,xls,xlsx
    enable-virus-scanning: false
    virus-scanner-url: ${VIRUS_SCANNER_URL:}
    cloud-storage:
      enabled: ${CLOUD_STORAGE_ENABLED:false}
      provider: ${CLOUD_STORAGE_PROVIDER:s3}
      bucket-name: ${S3_BUCKET_NAME:}
      region: ${AWS_REGION:us-east-1}
      access-key: ${AWS_ACCESS_KEY:}
      secret-key: ${AWS_SECRET_KEY:}
      endpoint: ${S3_ENDPOINT:}

# Spring multipart configuration
spring:
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
      enabled: true

---
# Development Profile
spring:
  config:
    activate:
      on-profile: dev
  
  datasource:
    url: jdbc:postgresql://localhost:5432/inventory_db
    username: inventory_user
    password: inventory_pass
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
      leak-detection-threshold: 60000
      pool-name: InventoryHikariPool

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true

  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true

  redis:
    host: localhost
    port: 6379
    password: 
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0

  cache:
    type: redis
    redis:
      time-to-live: 3600000 # 1 hour

logging:
  level:
    com.ecommerce.inventory: DEBUG
    org.springframework.cache: DEBUG
    org.springframework.transaction: DEBUG

---
# Test Profile
spring:
  config:
    activate:
      on-profile: test

  datasource:
    url: jdbc:h2:mem:testdb
    username: sa
    password: 
    driver-class-name: org.h2.Driver

  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true

  flyway:
    enabled: false

  redis:
    host: localhost
    port: 6379

  cache:
    type: simple

logging:
  level:
    com.ecommerce.inventory: DEBUG
    org.springframework.test: DEBUG

---
# Production Profile
spring:
  config:
    activate:
      on-profile: prod
  
  # Security hardening
  security:
    require-ssl: ${REQUIRE_SSL:true}
    headers:
      frame-options: DENY
      content-type-options: nosniff
      xss-protection: 1; mode=block
      referrer-policy: strict-origin-when-cross-origin
      content-security-policy: "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self'"

  # Database configuration optimized for production
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/inventory_db}
    username: ${DATABASE_USERNAME:inventory_user}
    password: ${DATABASE_PASSWORD:inventory_pass}
    driver-class-name: org.postgresql.Driver
    hikari:
      # Connection pool sizing for high-load scenarios
      maximum-pool-size: ${DB_MAX_POOL_SIZE:100}
      minimum-idle: ${DB_MIN_IDLE:20}
      idle-timeout: ${DB_IDLE_TIMEOUT:600000}
      connection-timeout: ${DB_CONNECTION_TIMEOUT:30000}
      max-lifetime: ${DB_MAX_LIFETIME:1800000}
      leak-detection-threshold: ${DB_LEAK_DETECTION_THRESHOLD:60000}
      pool-name: InventoryHikariPool-Prod
      # Performance optimizations
      connection-init-sql: "SET application_name = 'inventory-management'"
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
        useLocalSessionState: true
        rewriteBatchedStatements: true
        cacheResultSetMetadata: true
        cacheServerConfiguration: true
        elideSetAutoCommits: true
        maintainTimeStats: false

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    open-in-view: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        # Performance optimizations
        jdbc:
          batch_size: 25
          order_inserts: true
          order_updates: true
          batch_versioned_data: true
        cache:
          use_second_level_cache: true
          use_query_cache: true
          region:
            factory_class: org.hibernate.cache.jcache.JCacheRegionFactory
        # Connection handling
        connection:
          provider_disables_autocommit: true
        # Query optimizations
        query:
          plan_cache_max_size: 2048
          plan_parameter_metadata_max_size: 128

  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: false
    validate-on-migrate: true
    out-of-order: false
    clean-disabled: true
    mixed: false
    group: true
    installed-by: ${FLYWAY_USER:inventory-system}

  # Redis configuration optimized for production
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}
    database: ${REDIS_DATABASE:0}
    timeout: ${REDIS_TIMEOUT:5000ms}
    connect-timeout: ${REDIS_CONNECT_TIMEOUT:10000ms}
    client-type: lettuce
    lettuce:
      pool:
        max-active: ${REDIS_MAX_ACTIVE:50}
        max-idle: ${REDIS_MAX_IDLE:20}
        min-idle: ${REDIS_MIN_IDLE:10}
        max-wait: ${REDIS_MAX_WAIT:2000ms}
        time-between-eviction-runs: 30s
      cluster:
        refresh:
          adaptive: true
          period: 30s

  cache:
    type: redis
    redis:
      time-to-live: ${CACHE_TTL:3600000}
      cache-null-values: false
      use-key-prefix: true
      key-prefix: "inventory:"

  # Task execution configuration
  task:
    execution:
      pool:
        core-size: ${TASK_CORE_SIZE:10}
        max-size: ${TASK_MAX_SIZE:50}
        queue-capacity: ${TASK_QUEUE_CAPACITY:1000}
        keep-alive: 60s
        thread-name-prefix: "inventory-task-"
        allow-core-thread-timeout: true
    scheduling:
      pool:
        size: ${SCHEDULING_POOL_SIZE:10}
        thread-name-prefix: "inventory-scheduler-"

# Server configuration with security hardening
server:
  port: ${SERVER_PORT:8080}
  # SSL configuration
  ssl:
    enabled: ${SSL_ENABLED:false}
    key-store: ${SSL_KEYSTORE_PATH:}
    key-store-password: ${SSL_KEYSTORE_PASSWORD:}
    key-store-type: ${SSL_KEYSTORE_TYPE:PKCS12}
    key-alias: ${SSL_KEY_ALIAS:inventory-management}
  # Security headers
  servlet:
    session:
      cookie:
        secure: ${COOKIE_SECURE:true}
        http-only: true
        same-site: strict
  # Connection settings
  tomcat:
    max-connections: ${TOMCAT_MAX_CONNECTIONS:8192}
    accept-count: ${TOMCAT_ACCEPT_COUNT:100}
    threads:
      max: ${TOMCAT_MAX_THREADS:200}
      min-spare: ${TOMCAT_MIN_SPARE_THREADS:10}
    connection-timeout: ${TOMCAT_CONNECTION_TIMEOUT:20000}
    keep-alive-timeout: ${TOMCAT_KEEP_ALIVE_TIMEOUT:20000}
    max-keep-alive-requests: ${TOMCAT_MAX_KEEP_ALIVE_REQUESTS:100}

# Management endpoints security for production
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
      cors:
        allowed-origins: ${ACTUATOR_CORS_ORIGINS:}
        allowed-methods: GET
  endpoint:
    health:
      show-details: when-authorized
      show-components: when-authorized
      roles: ADMIN
    info:
      enabled: true
    metrics:
      enabled: true
    prometheus:
      enabled: true
    # Disable sensitive endpoints in production
    env:
      enabled: false
    configprops:
      enabled: false
    loggers:
      enabled: false
    threaddump:
      enabled: false
    heapdump:
      enabled: false
  security:
    enabled: true
    roles: ADMIN

# Production logging configuration
logging:
  level:
    com.ecommerce.inventory: ${LOG_LEVEL_APP:INFO}
    org.springframework.security: ${LOG_LEVEL_SECURITY:WARN}
    org.flywaydb: ${LOG_LEVEL_FLYWAY:INFO}
    org.hibernate.SQL: ${LOG_LEVEL_SQL:WARN}
    org.hibernate.type.descriptor.sql.BasicBinder: ${LOG_LEVEL_SQL_PARAMS:WARN}
    org.springframework.cache: ${LOG_LEVEL_CACHE:WARN}
    org.springframework.transaction: ${LOG_LEVEL_TRANSACTION:WARN}
    redis.clients.jedis: ${LOG_LEVEL_REDIS:WARN}
    io.lettuce.core: ${LOG_LEVEL_LETTUCE:WARN}
    com.zaxxer.hikari: ${LOG_LEVEL_HIKARI:WARN}
    # Security: Hide sensitive information
    org.springframework.boot.autoconfigure.security: ERROR
    org.springframework.boot.actuate.endpoint.web: WARN
  file:
    name: ${LOG_FILE_PATH:logs/inventory-management.log}
  logback:
    rollingpolicy:
      max-file-size: ${LOG_MAX_FILE_SIZE:50MB}
      max-history: ${LOG_MAX_HISTORY:60}
      total-size-cap: ${LOG_TOTAL_SIZE_CAP:1GB}
      clean-history-on-start: true
  pattern:
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{correlationId:-}] %logger{36} - %msg%n"
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{correlationId:-}] %logger{36} - %msg%n"

# Production-specific JWT configuration
jwt:
  secret: ${JWT_SECRET}
  expiration: ${JWT_EXPIRATION:1800000}
  refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}
  issuer: ${JWT_ISSUER:inventory-management}
  audience: ${JWT_AUDIENCE:inventory-users}

# Production file upload configuration
file:
  upload:
    dir: ${FILE_UPLOAD_DIR:/app/uploads}
    max-file-size: ${FILE_MAX_SIZE:10MB}
    max-request-size: ${FILE_MAX_REQUEST_SIZE:10MB}
    allowed-types: ${FILE_ALLOWED_TYPES:jpg,jpeg,png,gif,pdf,doc,docx,xls,xlsx}
    enable-virus-scanning: ${VIRUS_SCANNING_ENABLED:true}
    virus-scanner-url: ${VIRUS_SCANNER_URL}
    cloud-storage:
      enabled: ${CLOUD_STORAGE_ENABLED:true}
      provider: ${CLOUD_STORAGE_PROVIDER:s3}
      bucket-name: ${S3_BUCKET_NAME}
      region: ${AWS_REGION:us-east-1}
      access-key: ${AWS_ACCESS_KEY}
      secret-key: ${AWS_SECRET_KEY}
      endpoint: ${S3_ENDPOINT:}

# Application-specific production configuration
app:
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:}
    allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
    allowed-headers: ${CORS_ALLOWED_HEADERS:*}
    allow-credentials: ${CORS_ALLOW_CREDENTIALS:true}
    max-age: ${CORS_MAX_AGE:3600}
  
  rate-limiting:
    enabled: ${RATE_LIMITING_ENABLED:true}
    requests-per-minute: ${RATE_LIMIT_RPM:1000}
    burst-capacity: ${RATE_LIMIT_BURST:100}
  
  monitoring:
    metrics:
      enabled: ${METRICS_ENABLED:true}
      export-interval: ${METRICS_EXPORT_INTERVAL:60s}
    alerts:
      enabled: ${ALERTS_ENABLED:true}
      webhook-url: ${ALERT_WEBHOOK_URL:}
      email-recipients: ${ALERT_EMAIL_RECIPIENTS:}
  
  business:
    inventory:
      low-stock-check-interval: ${LOW_STOCK_CHECK_INTERVAL:300000}
      reorder-alert-threshold: ${REORDER_ALERT_THRESHOLD:10}
    orders:
      auto-cancel-timeout: ${ORDER_AUTO_CANCEL_TIMEOUT:86400000}
      processing-timeout: ${ORDER_PROCESSING_TIMEOUT:3600000}
    reports:
      generation-timeout: ${REPORT_GENERATION_TIMEOUT:300000}
      retention-days: ${REPORT_RETENTION_DAYS:90}